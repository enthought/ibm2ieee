Conversions to/from IBM floating-point format.

We currently do this not very well, for one particular case, in geolib_io. It
would be nice to have a collection of NumPy ufuncs that we can write well once,
then use many times.

We'll denote the formats we care about as: IBM32, IBM64, IEEE32, IEEE64.

In terms of precision, the formats compare as follows:

   IBM32 <= IEEE32 < IEEE64 <= IBM64

(IBM32 and IEEE32 have matching precision in the best case, but IBM32 has
poorer precision in the worst case; for 64-bit it's the other way around: the
worst case of the IBM64 precision matches the precision of IEEE64, while the
best case is strictly better.

In terms of range, we have:

   IEEE32 < IBM32 ~= IBM64 < IEEE64

The IBM32 and IBM64 exponents are identical, so the ranges are approximately
the same; the range of IBM64 is just a hair larger than that of IBM32 thanks to
the extra precision.

Other differences:

- it's not clear whether the IBM formats should support non-normalised values
  (giving an equivalent of IEEE's gradual underflow) or negative zeros. This
  matters only if we're converting _to_ IBM format. If we're converting from
  IBM to IEEE, then it's always clear how to interpret a given bit pattern.

- The IBM format has no exponent reserved for infinities and NaNs; those
  special values aren't supported. Again, this matters if we're converting
  from IEEE to IBM and need to convert NaNs and infinities, but for IBM to
  IEEE conversion it's clear what to do.

Notes
-----
Conversion from IBM32 to IBM64 is trivial: just pad with zeros.

Formats
-------
IBM single precision:
- sign bit
- 7-bit biased exponent (representing a power of 16), bias=64
- 24-bit fraction (binary)
- no infinities or nans
- largest representable finite value: 16**(127-64) * (1 - 2**-24)
  = 7.2370051459731155e+75
- smallest representable normal positive finite value:
  16**(-64) * (0.0001_2) = 16**-64 * 2**-4 = 2**-260 = 5.397605346934028e-79
- smallest representable nonnormal value:
  16**(-16) * 2**-24 = 2**-280 = 5.147557589468029e-85
